package util.org;

import static org.testng.Assert.assertFalse;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class testreport {
	public WebDriver driver;
	public ExtentSparkReporter spark;
	public ExtentReports extent;
	public ExtentTest logger;
	@BeforeTest
	public void startReport() {
		  // Create an object of Extent Reports
		extent = new ExtentReports();

		spark = new ExtentSparkReporter(System.getProperty("user.dir") + "/test-output/STMExtentReport.html");
		extent.attachReporter(spark);
		extent.setSystemInfo("Host Name", "testextentreport");
		         extent.setSystemInfo("Environment", "Production");
		extent.setSystemInfo("User Name", "pooja");
	spark.config().setDocumentTitle("Title of the Report is testreport ");
	                // Name of the report
	spark.config().setReportName("Name of the Report Comes here ");
	                // Dark Theme
	spark.config().setTheme(Theme.STANDARD);
	}
	//This method is to capture the screenshot and return the path of the screenshot.
	/*
	 * public static String getScreenShot(WebDriver driver, String screenshotName)
	 * throws IOException { String dateName = new
	 * SimpleDateFormat("yyyyMMddhhmmss").format(new Date()); TakesScreenshot ts =
	 * (TakesScreenshot) driver; File source = ts.getScreenshotAs(OutputType.FILE);
	 * // after execution, you could see a folder "FailedTestsScreenshots" under src
	 * folder String destination = System.getProperty("user.dir") + "/Screenshots/"
	 * + screenshotName + dateName + ".png"; File finalDestination = new
	 * File(destination); //FileUtils.copyFile(source, finalDestination);
	 return destination;	
	}*/
	 
	@BeforeMethod
	public void setup() {
	System.setProperty("webdriver.chrome.driver","C:\\Users\\admin\\Downloads\\chromedriver_win32\\chromedriver.exe");
	driver = new ChromeDriver();
	driver.manage().window().maximize();
	driver.get("https://www.google.com/");
	}
	@Test
	public void verifyTitle() {
	logger = extent.createTest("To verify Google Title");
	Assert.assertEquals(driver.getTitle(),"Google");
	}
	@Test
	
	
public void zoominandout() throws AWTException, InterruptedException {
		logger = extent.createTest("To verify title");
		driver.get("https://rahulshettyacademy.com/AutomationPractice/");
		Robot robot = new Robot();
		System.out.println("About to zoom in");
		for (int i = 0; i < 3; i++) {			
			robot.keyPress(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_ADD);
			robot.keyRelease(KeyEvent.VK_ADD);
			robot.keyRelease(KeyEvent.VK_CONTROL);logger.createNode("zoomin");
		}
		Thread.sleep(5000);
		System.out.println("About to zoom out");
		for (int i = 0; i < 3; i++) {
			robot.keyPress(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_SUBTRACT);
			robot.keyRelease(KeyEvent.VK_SUBTRACT);
			robot.keyRelease(KeyEvent.VK_CONTROL);logger.createNode("zoomout");
		}
	}
	
	
	@Test
	public void testAssertFunctions() {
		logger = extent.createTest("To verify browserstack");
	//System.setProperty("webdriver.chrome.driver", "C:\\I2EWebsiteTest\\Driver\\chromedriver.exe");
	WebDriver driver = new ChromeDriver();
	driver.navigate().to("https://www.browserstack.com/");
	String ActualTitle = driver.getTitle();
	String ExpectedTitle = "Most Reliable App & Cross Browser Testing Platform | BrowserStack";
	Assert.assertEquals(ExpectedTitle, ActualTitle);logger.createNode("browserstack");
	}
	
	@Test
	public void verify() {
	logger = extent.createTest("To verify title");
	driver.get("https://rahulshettyacademy.com/AutomationPractice/");
	String t = driver.getTitle();
	if(t=="pooja")
	{
		logger.createNode("title is Present");
		
	}else {
		logger.createNode("title is not Present");
	}
	

	
	//boolean img = driver.findElement(By.xpath("//img[@id='hplogo']")).isDisplayed();
	//logger.createNode("Image is Present");
	//Assert.assertTrue(img);
	//logger.createNode("Image is not Present");
	//Assert.assertFalse(img);
	}
	
	@Test
	public void testAssert() {logger = extent.createTest("To verify testAssert");
	//System.setProperty("webdriver.chrome.driver", "C:\\I2EWebsiteTest\\Driver\\chromedriver.exe");
//WebDriver driver = new ChromeDriver();
	driver.navigate().to("https://www.browserstack.com/");
	Boolean verifyTitle = driver.getTitle().equalsIgnoreCase("Most Reliable App & Cross Browser Testing Platform");
	assertFalse(verifyTitle);
	}
	
	@AfterMethod
	public void getResult(ITestResult result) throws Exception{
	if(result.getStatus() == ITestResult.FAILURE){
	//MarkupHelper is used to display the output in different colors
	logger.log(Status.FAIL, MarkupHelper.createLabel(result.getName() + " - Test Case Failed", ExtentColor.RED));
	logger.log(Status.FAIL, MarkupHelper.createLabel(result.getThrowable() + " - Test Case Failed", ExtentColor.RED));
	//To capture screenshot path and store the path of the screenshot in the string "screenshotPath"
	//We do pass the path captured by this method in to the extent reports using "logger.addScreenCapture" method.
	//String Scrnshot=TakeScreenshot.captuerScreenshot(driver,"TestCaseFailed");
	//String screenshotPath = getScreenShot(driver, result.getName());
	//To add it in the extent report
	//logger.fail("Test Case Failed Snapshot is below " + logger.addScreenCaptureFromPath(screenshotPath));
	}
	else if(result.getStatus() == ITestResult.SKIP){
	logger.log(Status.SKIP, MarkupHelper.createLabel(result.getName() + " - Test Case Skipped", ExtentColor.ORANGE));
	}
	else if(result.getStatus() == ITestResult.SUCCESS)
	{
	logger.log(Status.PASS, MarkupHelper.createLabel(result.getName()+" Test Case PASSED", ExtentColor.GREEN));
	}
	driver.quit();
	}
	 
	@AfterTest
	public void endReport() {
	extent.flush();
	}
	}
	

